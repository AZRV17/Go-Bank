// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/AZRV17/goWEB/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAccounts is a mock of Accounts interface.
type MockAccounts struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsMockRecorder
}

// MockAccountsMockRecorder is the mock recorder for MockAccounts.
type MockAccountsMockRecorder struct {
	mock *MockAccounts
}

// NewMockAccounts creates a new mock instance.
func NewMockAccounts(ctrl *gomock.Controller) *MockAccounts {
	mock := &MockAccounts{ctrl: ctrl}
	mock.recorder = &MockAccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounts) EXPECT() *MockAccountsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccounts) Create(account domain.Account) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountsMockRecorder) Create(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccounts)(nil).Create), account)
}

// Delete mocks base method.
func (m *MockAccounts) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountsMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccounts)(nil).Delete), id)
}

// GetAccount mocks base method.
func (m *MockAccounts) GetAccount(id int64) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", id)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountsMockRecorder) GetAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccounts)(nil).GetAccount), id)
}

// GetAll mocks base method.
func (m *MockAccounts) GetAll() ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAccountsMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccounts)(nil).GetAll))
}

// Update mocks base method.
func (m *MockAccounts) Update(account *domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountsMockRecorder) Update(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccounts)(nil).Update), account)
}

// MockEntries is a mock of Entries interface.
type MockEntries struct {
	ctrl     *gomock.Controller
	recorder *MockEntriesMockRecorder
}

// MockEntriesMockRecorder is the mock recorder for MockEntries.
type MockEntriesMockRecorder struct {
	mock *MockEntries
}

// NewMockEntries creates a new mock instance.
func NewMockEntries(ctrl *gomock.Controller) *MockEntries {
	mock := &MockEntries{ctrl: ctrl}
	mock.recorder = &MockEntriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntries) EXPECT() *MockEntriesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntries) Create(entry domain.Entry) (*domain.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entry)
	ret0, _ := ret[0].(*domain.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEntriesMockRecorder) Create(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntries)(nil).Create), entry)
}

// Delete mocks base method.
func (m *MockEntries) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntriesMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntries)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockEntries) GetAll() ([]domain.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEntriesMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEntries)(nil).GetAll))
}

// GetEntry mocks base method.
func (m *MockEntries) GetEntry(id int64) (*domain.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", id)
	ret0, _ := ret[0].(*domain.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockEntriesMockRecorder) GetEntry(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockEntries)(nil).GetEntry), id)
}

// Update mocks base method.
func (m *MockEntries) Update(entry domain.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEntriesMockRecorder) Update(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEntries)(nil).Update), entry)
}

// MockTransfers is a mock of Transfers interface.
type MockTransfers struct {
	ctrl     *gomock.Controller
	recorder *MockTransfersMockRecorder
}

// MockTransfersMockRecorder is the mock recorder for MockTransfers.
type MockTransfersMockRecorder struct {
	mock *MockTransfers
}

// NewMockTransfers creates a new mock instance.
func NewMockTransfers(ctrl *gomock.Controller) *MockTransfers {
	mock := &MockTransfers{ctrl: ctrl}
	mock.recorder = &MockTransfersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransfers) EXPECT() *MockTransfersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransfers) Create(transfer domain.Transfer) (*domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transfer)
	ret0, _ := ret[0].(*domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransfersMockRecorder) Create(transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransfers)(nil).Create), transfer)
}

// Delete mocks base method.
func (m *MockTransfers) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransfersMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransfers)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockTransfers) GetAll() ([]domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTransfersMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTransfers)(nil).GetAll))
}

// GetTransfer mocks base method.
func (m *MockTransfers) GetTransfer(id int64) (*domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", id)
	ret0, _ := ret[0].(*domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockTransfersMockRecorder) GetTransfer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockTransfers)(nil).GetTransfer), id)
}

// Update mocks base method.
func (m *MockTransfers) Update(transfer domain.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransfersMockRecorder) Update(transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransfers)(nil).Update), transfer)
}
